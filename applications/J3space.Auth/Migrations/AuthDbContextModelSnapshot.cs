// <auto-generated />

using System;
using J3space.Auth.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Volo.Abp.EntityFrameworkCore;

namespace J3space.Auth.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.MySql)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<string>("Description")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("IsStatic")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("Regex")
                    .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                    .HasMaxLength(512);

                b.Property<string>("RegexDescription")
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<bool>("Required")
                    .HasColumnType("tinyint(1)");

                b.Property<int>("ValueType")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.ToTable("AbpClaimTypes");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid?>("SourceTenantId")
                    .HasColumnType("char(36)");

                b.Property<Guid>("SourceUserId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("TargetTenantId")
                    .HasColumnType("char(36)");

                b.Property<Guid>("TargetUserId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                    .IsUnique();

                b.ToTable("AbpLinkUsers");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("IsDefault")
                    .HasColumnName("IsDefault")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("IsPublic")
                    .HasColumnName("IsPublic")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("IsStatic")
                    .HasColumnName("IsStatic")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .IsRequired()
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName");

                b.ToTable("AbpRoles");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("char(36)");

                b.Property<string>("ClaimType")
                    .IsRequired()
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("ClaimValue")
                    .HasColumnType("varchar(1024) CHARACTER SET utf8mb4")
                    .HasMaxLength(1024);

                b.Property<Guid>("RoleId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AbpRoleClaims");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("Action")
                    .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                    .HasMaxLength(96);

                b.Property<string>("ApplicationName")
                    .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                    .HasMaxLength(96);

                b.Property<string>("BrowserInfo")
                    .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                    .HasMaxLength(512);

                b.Property<string>("ClientId")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("ClientIpAddress")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<string>("CorrelationId")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Identity")
                    .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                    .HasMaxLength(96);

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.Property<string>("TenantName")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<Guid?>("UserId")
                    .HasColumnType("char(36)");

                b.Property<string>("UserName")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("TenantId", "Action");

                b.HasIndex("TenantId", "ApplicationName");

                b.HasIndex("TenantId", "Identity");

                b.HasIndex("TenantId", "UserId");

                b.ToTable("AbpSecurityLogs");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<int>("AccessFailedCount")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AccessFailedCount")
                    .HasColumnType("int")
                    .HasDefaultValue(0);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<DateTime>("CreationTime")
                    .HasColumnName("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CreatorId")
                    .HasColumnName("CreatorId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("DeleterId")
                    .HasColumnName("DeleterId")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("DeletionTime")
                    .HasColumnName("DeletionTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnName("Email")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EmailConfirmed")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IsDeleted")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<bool>("IsExternal")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IsExternal")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<DateTime?>("LastModificationTime")
                    .HasColumnName("LastModificationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("LastModifierId")
                    .HasColumnName("LastModifierId")
                    .HasColumnType("char(36)");

                b.Property<bool>("LockoutEnabled")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LockoutEnabled")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .HasColumnName("Name")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("NormalizedEmail")
                    .IsRequired()
                    .HasColumnName("NormalizedEmail")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .IsRequired()
                    .HasColumnName("NormalizedUserName")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnName("PasswordHash")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("PhoneNumber")
                    .HasColumnName("PhoneNumber")
                    .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                    .HasMaxLength(16);

                b.Property<bool>("PhoneNumberConfirmed")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PhoneNumberConfirmed")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<string>("SecurityStamp")
                    .IsRequired()
                    .HasColumnName("SecurityStamp")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("Surname")
                    .HasColumnName("Surname")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.Property<bool>("TwoFactorEnabled")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TwoFactorEnabled")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<string>("UserName")
                    .IsRequired()
                    .HasColumnName("UserName")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("Email");

                b.HasIndex("NormalizedEmail");

                b.HasIndex("NormalizedUserName");

                b.HasIndex("UserName");

                b.ToTable("AbpUsers");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("char(36)");

                b.Property<string>("ClaimType")
                    .IsRequired()
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("ClaimValue")
                    .HasColumnType("varchar(1024) CHARACTER SET utf8mb4")
                    .HasMaxLength(1024);

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.Property<Guid>("UserId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AbpUserClaims");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("char(36)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<string>("ProviderKey")
                    .IsRequired()
                    .HasColumnType("varchar(196) CHARACTER SET utf8mb4")
                    .HasMaxLength(196);

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("UserId", "LoginProvider");

                b.HasIndex("LoginProvider", "ProviderKey");

                b.ToTable("AbpUserLogins");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
            {
                b.Property<Guid>("OrganizationUnitId")
                    .HasColumnType("char(36)");

                b.Property<Guid>("UserId")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreationTime")
                    .HasColumnName("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CreatorId")
                    .HasColumnName("CreatorId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("OrganizationUnitId", "UserId");

                b.HasIndex("UserId", "OrganizationUnitId");

                b.ToTable("AbpUserOrganizationUnits");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("char(36)");

                b.Property<Guid>("RoleId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId", "UserId");

                b.ToTable("AbpUserRoles");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("char(36)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("Name")
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.Property<string>("Value")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AbpUserTokens");
            });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasColumnName("Code")
                    .HasColumnType("varchar(95) CHARACTER SET utf8mb4")
                    .HasMaxLength(95);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<DateTime>("CreationTime")
                    .HasColumnName("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CreatorId")
                    .HasColumnName("CreatorId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("DeleterId")
                    .HasColumnName("DeleterId")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("DeletionTime")
                    .HasColumnName("DeletionTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("DisplayName")
                    .IsRequired()
                    .HasColumnName("DisplayName")
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IsDeleted")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<DateTime?>("LastModificationTime")
                    .HasColumnName("LastModificationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("LastModifierId")
                    .HasColumnName("LastModifierId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("ParentId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("Code");

                b.HasIndex("ParentId");

                b.ToTable("AbpOrganizationUnits");
            });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
            {
                b.Property<Guid>("OrganizationUnitId")
                    .HasColumnType("char(36)");

                b.Property<Guid>("RoleId")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreationTime")
                    .HasColumnName("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CreatorId")
                    .HasColumnName("CreatorId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("OrganizationUnitId", "RoleId");

                b.HasIndex("RoleId", "OrganizationUnitId");

                b.ToTable("AbpOrganizationUnitRoles");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiResource", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<DateTime>("CreationTime")
                    .HasColumnName("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CreatorId")
                    .HasColumnName("CreatorId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("DeleterId")
                    .HasColumnName("DeleterId")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("DeletionTime")
                    .HasColumnName("DeletionTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Description")
                    .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                    .HasMaxLength(1000);

                b.Property<string>("DisplayName")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<bool>("Enabled")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IsDeleted")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<DateTime?>("LastModificationTime")
                    .HasColumnName("LastModificationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("LastModifierId")
                    .HasColumnName("LastModifierId")
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("Properties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.ToTable("IdentityServerApiResources");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiResourceClaim", b =>
            {
                b.Property<Guid>("ApiResourceId")
                    .HasColumnType("char(36)");

                b.Property<string>("Type")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.HasKey("ApiResourceId", "Type");

                b.ToTable("IdentityServerApiClaims");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScope", b =>
            {
                b.Property<Guid>("ApiResourceId")
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("Description")
                    .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                    .HasMaxLength(1000);

                b.Property<string>("DisplayName")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<bool>("Emphasize")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("Required")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("ShowInDiscoveryDocument")
                    .HasColumnType("tinyint(1)");

                b.HasKey("ApiResourceId", "Name");

                b.ToTable("IdentityServerApiScopes");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScopeClaim", b =>
            {
                b.Property<Guid>("ApiResourceId")
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("Type")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.HasKey("ApiResourceId", "Name", "Type");

                b.ToTable("IdentityServerApiScopeClaims");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiSecret", b =>
            {
                b.Property<Guid>("ApiResourceId")
                    .HasColumnType("char(36)");

                b.Property<string>("Type")
                    .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                    .HasMaxLength(250);

                b.Property<string>("Value")
                    .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                    .HasMaxLength(300);

                b.Property<string>("Description")
                    .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                    .HasMaxLength(2000);

                b.Property<DateTime?>("Expiration")
                    .HasColumnType("datetime(6)");

                b.HasKey("ApiResourceId", "Type", "Value");

                b.ToTable("IdentityServerApiSecrets");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.Client", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<int>("AbsoluteRefreshTokenLifetime")
                    .HasColumnType("int");

                b.Property<int>("AccessTokenLifetime")
                    .HasColumnType("int");

                b.Property<int>("AccessTokenType")
                    .HasColumnType("int");

                b.Property<bool>("AllowAccessTokensViaBrowser")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("AllowOfflineAccess")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("AllowPlainTextPkce")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("AllowRememberConsent")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("AlwaysSendClientClaims")
                    .HasColumnType("tinyint(1)");

                b.Property<int>("AuthorizationCodeLifetime")
                    .HasColumnType("int");

                b.Property<bool>("BackChannelLogoutSessionRequired")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("BackChannelLogoutUri")
                    .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                    .HasMaxLength(2000);

                b.Property<string>("ClientClaimsPrefix")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("ClientId")
                    .IsRequired()
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("ClientName")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("ClientUri")
                    .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                    .HasMaxLength(2000);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<int?>("ConsentLifetime")
                    .HasColumnType("int");

                b.Property<DateTime>("CreationTime")
                    .HasColumnName("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CreatorId")
                    .HasColumnName("CreatorId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("DeleterId")
                    .HasColumnName("DeleterId")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("DeletionTime")
                    .HasColumnName("DeletionTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Description")
                    .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                    .HasMaxLength(1000);

                b.Property<int>("DeviceCodeLifetime")
                    .HasColumnType("int");

                b.Property<bool>("EnableLocalLogin")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("Enabled")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("FrontChannelLogoutSessionRequired")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("FrontChannelLogoutUri")
                    .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                    .HasMaxLength(2000);

                b.Property<int>("IdentityTokenLifetime")
                    .HasColumnType("int");

                b.Property<bool>("IncludeJwtId")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IsDeleted")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<DateTime?>("LastModificationTime")
                    .HasColumnName("LastModificationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("LastModifierId")
                    .HasColumnName("LastModifierId")
                    .HasColumnType("char(36)");

                b.Property<string>("LogoUri")
                    .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                    .HasMaxLength(2000);

                b.Property<string>("PairWiseSubjectSalt")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("ProtocolType")
                    .IsRequired()
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<int>("RefreshTokenExpiration")
                    .HasColumnType("int");

                b.Property<int>("RefreshTokenUsage")
                    .HasColumnType("int");

                b.Property<bool>("RequireClientSecret")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("RequireConsent")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("RequirePkce")
                    .HasColumnType("tinyint(1)");

                b.Property<int>("SlidingRefreshTokenLifetime")
                    .HasColumnType("int");

                b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("UserCodeType")
                    .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                    .HasMaxLength(100);

                b.Property<int?>("UserSsoLifetime")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("IdentityServerClients");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientClaim", b =>
            {
                b.Property<Guid>("ClientId")
                    .HasColumnType("char(36)");

                b.Property<string>("Type")
                    .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                    .HasMaxLength(250);

                b.Property<string>("Value")
                    .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                    .HasMaxLength(250);

                b.HasKey("ClientId", "Type", "Value");

                b.ToTable("IdentityServerClientClaims");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientCorsOrigin", b =>
            {
                b.Property<Guid>("ClientId")
                    .HasColumnType("char(36)");

                b.Property<string>("Origin")
                    .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                    .HasMaxLength(150);

                b.HasKey("ClientId", "Origin");

                b.ToTable("IdentityServerClientCorsOrigins");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientGrantType", b =>
            {
                b.Property<Guid>("ClientId")
                    .HasColumnType("char(36)");

                b.Property<string>("GrantType")
                    .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                    .HasMaxLength(250);

                b.HasKey("ClientId", "GrantType");

                b.ToTable("IdentityServerClientGrantTypes");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientIdPRestriction", b =>
            {
                b.Property<Guid>("ClientId")
                    .HasColumnType("char(36)");

                b.Property<string>("Provider")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.HasKey("ClientId", "Provider");

                b.ToTable("IdentityServerClientIdPRestrictions");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientPostLogoutRedirectUri", b =>
            {
                b.Property<Guid>("ClientId")
                    .HasColumnType("char(36)");

                b.Property<string>("PostLogoutRedirectUri")
                    .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                    .HasMaxLength(300);

                b.HasKey("ClientId", "PostLogoutRedirectUri");

                b.ToTable("IdentityServerClientPostLogoutRedirectUris");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientProperty", b =>
            {
                b.Property<Guid>("ClientId")
                    .HasColumnType("char(36)");

                b.Property<string>("Key")
                    .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                    .HasMaxLength(250);

                b.Property<string>("Value")
                    .IsRequired()
                    .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                    .HasMaxLength(2000);

                b.HasKey("ClientId", "Key");

                b.ToTable("IdentityServerClientProperties");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientRedirectUri", b =>
            {
                b.Property<Guid>("ClientId")
                    .HasColumnType("char(36)");

                b.Property<string>("RedirectUri")
                    .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                    .HasMaxLength(300);

                b.HasKey("ClientId", "RedirectUri");

                b.ToTable("IdentityServerClientRedirectUris");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientScope", b =>
            {
                b.Property<Guid>("ClientId")
                    .HasColumnType("char(36)");

                b.Property<string>("Scope")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.HasKey("ClientId", "Scope");

                b.ToTable("IdentityServerClientScopes");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientSecret", b =>
            {
                b.Property<Guid>("ClientId")
                    .HasColumnType("char(36)");

                b.Property<string>("Type")
                    .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                    .HasMaxLength(250);

                b.Property<string>("Value")
                    .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                    .HasMaxLength(300);

                b.Property<string>("Description")
                    .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                    .HasMaxLength(2000);

                b.Property<DateTime?>("Expiration")
                    .HasColumnType("datetime(6)");

                b.HasKey("ClientId", "Type", "Value");

                b.ToTable("IdentityServerClientSecrets");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Devices.DeviceFlowCodes", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("ClientId")
                    .IsRequired()
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<DateTime>("CreationTime")
                    .HasColumnName("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CreatorId")
                    .HasColumnName("CreatorId")
                    .HasColumnType("char(36)");

                b.Property<string>("Data")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4")
                    .HasMaxLength(50000);

                b.Property<string>("DeviceCode")
                    .IsRequired()
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<DateTime?>("Expiration")
                    .IsRequired()
                    .HasColumnType("datetime(6)");

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("SubjectId")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("UserCode")
                    .IsRequired()
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.HasKey("Id");

                b.HasIndex("DeviceCode")
                    .IsUnique();

                b.HasIndex("Expiration");

                b.HasIndex("UserCode")
                    .IsUnique();

                b.ToTable("IdentityServerDeviceFlowCodes");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Grants.PersistedGrant", b =>
            {
                b.Property<string>("Key")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("ClientId")
                    .IsRequired()
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Data")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4")
                    .HasMaxLength(10000);

                b.Property<DateTime?>("Expiration")
                    .HasColumnType("datetime(6)");

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<Guid>("Id")
                    .HasColumnType("char(36)");

                b.Property<string>("SubjectId")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("Type")
                    .IsRequired()
                    .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                    .HasMaxLength(50);

                b.HasKey("Key");

                b.HasIndex("Expiration");

                b.HasIndex("SubjectId", "ClientId", "Type");

                b.ToTable("IdentityServerPersistedGrants");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.IdentityResources.IdentityClaim", b =>
            {
                b.Property<Guid>("IdentityResourceId")
                    .HasColumnType("char(36)");

                b.Property<string>("Type")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.HasKey("IdentityResourceId", "Type");

                b.ToTable("IdentityServerIdentityClaims");
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.IdentityResources.IdentityResource", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<DateTime>("CreationTime")
                    .HasColumnName("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CreatorId")
                    .HasColumnName("CreatorId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("DeleterId")
                    .HasColumnName("DeleterId")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("DeletionTime")
                    .HasColumnName("DeletionTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Description")
                    .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                    .HasMaxLength(1000);

                b.Property<string>("DisplayName")
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<bool>("Emphasize")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("Enabled")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IsDeleted")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<DateTime?>("LastModificationTime")
                    .HasColumnName("LastModificationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("LastModifierId")
                    .HasColumnName("LastModifierId")
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                    .HasMaxLength(200);

                b.Property<string>("Properties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("Required")
                    .HasColumnType("tinyint(1)");

                b.Property<bool>("ShowInDiscoveryDocument")
                    .HasColumnType("tinyint(1)");

                b.HasKey("Id");

                b.ToTable("IdentityServerIdentityResources");
            });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<DateTime>("CreationTime")
                    .HasColumnName("CreationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CreatorId")
                    .HasColumnName("CreatorId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("DeleterId")
                    .HasColumnName("DeleterId")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("DeletionTime")
                    .HasColumnName("DeletionTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IsDeleted")
                    .HasColumnType("tinyint(1)")
                    .HasDefaultValue(false);

                b.Property<DateTime?>("LastModificationTime")
                    .HasColumnName("LastModificationTime")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("LastModifierId")
                    .HasColumnName("LastModifierId")
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.HasKey("Id");

                b.HasIndex("Name");

                b.ToTable("AbpTenants");
            });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
            {
                b.Property<Guid>("TenantId")
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("Value")
                    .IsRequired()
                    .HasColumnType("varchar(1024) CHARACTER SET utf8mb4")
                    .HasMaxLength(1024);

                b.HasKey("TenantId", "Name");

                b.ToTable("AbpTenantConnectionStrings");
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
            {
                b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                    .WithMany("Claims")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
            {
                b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                    .WithMany("Claims")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
            {
                b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                    .WithMany("Logins")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
            {
                b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                    .WithMany()
                    .HasForeignKey("OrganizationUnitId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                    .WithMany("OrganizationUnits")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
            {
                b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                    .WithMany("Roles")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
            {
                b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                    .WithMany("Tokens")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
            {
                b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                    .WithMany()
                    .HasForeignKey("ParentId");
            });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
            {
                b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                    .WithMany("Roles")
                    .HasForeignKey("OrganizationUnitId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiResourceClaim", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiResource", null)
                    .WithMany("UserClaims")
                    .HasForeignKey("ApiResourceId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScope", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiResource", null)
                    .WithMany("Scopes")
                    .HasForeignKey("ApiResourceId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiScopeClaim", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiScope", null)
                    .WithMany("UserClaims")
                    .HasForeignKey("ApiResourceId", "Name")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.ApiResources.ApiSecret", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.ApiResources.ApiResource", null)
                    .WithMany("Secrets")
                    .HasForeignKey("ApiResourceId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientClaim", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                    .WithMany("Claims")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientCorsOrigin", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                    .WithMany("AllowedCorsOrigins")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientGrantType", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                    .WithMany("AllowedGrantTypes")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientIdPRestriction", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                    .WithMany("IdentityProviderRestrictions")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientPostLogoutRedirectUri", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                    .WithMany("PostLogoutRedirectUris")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientProperty", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                    .WithMany("Properties")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientRedirectUri", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                    .WithMany("RedirectUris")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientScope", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                    .WithMany("AllowedScopes")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.Clients.ClientSecret", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.Clients.Client", null)
                    .WithMany("ClientSecrets")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.IdentityServer.IdentityResources.IdentityClaim", b =>
            {
                b.HasOne("Volo.Abp.IdentityServer.IdentityResources.IdentityResource", null)
                    .WithMany("UserClaims")
                    .HasForeignKey("IdentityResourceId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
            {
                b.HasOne("Volo.Abp.TenantManagement.Tenant", null)
                    .WithMany("ConnectionStrings")
                    .HasForeignKey("TenantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}