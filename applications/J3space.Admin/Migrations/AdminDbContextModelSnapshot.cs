// <auto-generated />

using System;
using J3space.Admin.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Volo.Abp.EntityFrameworkCore;

namespace J3space.Admin.Migrations
{
    [DbContext(typeof(AdminDbContext))]
    partial class AdminDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.MySql)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("ApplicationName")
                    .HasColumnName("ApplicationName")
                    .HasColumnType("varchar(96) CHARACTER SET utf8mb4")
                    .HasMaxLength(96);

                b.Property<string>("BrowserInfo")
                    .HasColumnName("BrowserInfo")
                    .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                    .HasMaxLength(512);

                b.Property<string>("ClientId")
                    .HasColumnName("ClientId")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("ClientIpAddress")
                    .HasColumnName("ClientIpAddress")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("ClientName")
                    .HasColumnName("ClientName")
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<string>("Comments")
                    .HasColumnName("Comments")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnName("ConcurrencyStamp")
                    .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                    .HasMaxLength(40);

                b.Property<string>("CorrelationId")
                    .HasColumnName("CorrelationId")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("Exceptions")
                    .HasColumnName("Exceptions")
                    .HasColumnType("longtext CHARACTER SET utf8mb4")
                    .HasMaxLength(4000);

                b.Property<int>("ExecutionDuration")
                    .HasColumnName("ExecutionDuration")
                    .HasColumnType("int");

                b.Property<DateTime>("ExecutionTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("HttpMethod")
                    .HasColumnName("HttpMethod")
                    .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                    .HasMaxLength(16);

                b.Property<int?>("HttpStatusCode")
                    .HasColumnName("HttpStatusCode")
                    .HasColumnType("int");

                b.Property<Guid?>("ImpersonatorTenantId")
                    .HasColumnName("ImpersonatorTenantId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("ImpersonatorUserId")
                    .HasColumnName("ImpersonatorUserId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.Property<string>("TenantName")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("Url")
                    .HasColumnName("Url")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<Guid?>("UserId")
                    .HasColumnName("UserId")
                    .HasColumnType("char(36)");

                b.Property<string>("UserName")
                    .HasColumnName("UserName")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("TenantId", "ExecutionTime");

                b.HasIndex("TenantId", "UserId", "ExecutionTime");

                b.ToTable("AbpAuditLogs");
            });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("AuditLogId")
                    .HasColumnName("AuditLogId")
                    .HasColumnType("char(36)");

                b.Property<int>("ExecutionDuration")
                    .HasColumnName("ExecutionDuration")
                    .HasColumnType("int");

                b.Property<DateTime>("ExecutionTime")
                    .HasColumnName("ExecutionTime")
                    .HasColumnType("datetime(6)");

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("MethodName")
                    .HasColumnName("MethodName")
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<string>("Parameters")
                    .HasColumnName("Parameters")
                    .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                    .HasMaxLength(2000);

                b.Property<string>("ServiceName")
                    .HasColumnName("ServiceName")
                    .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                    .HasMaxLength(256);

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("AuditLogId");

                b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");

                b.ToTable("AbpAuditLogActions");
            });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("AuditLogId")
                    .HasColumnName("AuditLogId")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("ChangeTime")
                    .HasColumnName("ChangeTime")
                    .HasColumnType("datetime(6)");

                b.Property<byte>("ChangeType")
                    .HasColumnName("ChangeType")
                    .HasColumnType("tinyint unsigned");

                b.Property<string>("EntityId")
                    .IsRequired()
                    .HasColumnName("EntityId")
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<Guid?>("EntityTenantId")
                    .HasColumnType("char(36)");

                b.Property<string>("EntityTypeFullName")
                    .IsRequired()
                    .HasColumnName("EntityTypeFullName")
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<string>("ExtraProperties")
                    .HasColumnName("ExtraProperties")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("AuditLogId");

                b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");

                b.ToTable("AbpEntityChanges");
            });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("EntityChangeId")
                    .HasColumnType("char(36)");

                b.Property<string>("NewValue")
                    .HasColumnName("NewValue")
                    .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                    .HasMaxLength(512);

                b.Property<string>("OriginalValue")
                    .HasColumnName("OriginalValue")
                    .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                    .HasMaxLength(512);

                b.Property<string>("PropertyName")
                    .IsRequired()
                    .HasColumnName("PropertyName")
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<string>("PropertyTypeFullName")
                    .IsRequired()
                    .HasColumnName("PropertyTypeFullName")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("EntityChangeId");

                b.ToTable("AbpEntityPropertyChanges");
            });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<string>("ProviderKey")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("ProviderName")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("Value")
                    .IsRequired()
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.HasKey("Id");

                b.HasIndex("Name", "ProviderName", "ProviderKey");

                b.ToTable("AbpFeatureValues");
            });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<string>("ProviderKey")
                    .IsRequired()
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("ProviderName")
                    .IsRequired()
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<Guid?>("TenantId")
                    .HasColumnName("TenantId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("Name", "ProviderName", "ProviderKey");

                b.ToTable("AbpPermissionGrants");
            });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                    .HasMaxLength(128);

                b.Property<string>("ProviderKey")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("ProviderName")
                    .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                    .HasMaxLength(64);

                b.Property<string>("Value")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4")
                    .HasMaxLength(2048);

                b.HasKey("Id");

                b.HasIndex("Name", "ProviderName", "ProviderKey");

                b.ToTable("AbpSettings");
            });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
            {
                b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                    .WithMany("Actions")
                    .HasForeignKey("AuditLogId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
            {
                b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                    .WithMany("EntityChanges")
                    .HasForeignKey("AuditLogId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
            {
                b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                    .WithMany("PropertyChanges")
                    .HasForeignKey("EntityChangeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}